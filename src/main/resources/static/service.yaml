openapi: 3.0.1
info:
  title: Car Service API
  version: 1.0.0
  description: API for managing car services
servers:
  - url: http://localhost:8080/api
    description: Dev server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login users
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT Token
          headers:
            Authorization:
              description: JWT Bearer token
              schema:
                type: string
        '401':
          description: Invalid credentials

  /auth/signup/employee:
    post:
      tags:
        - Authentication
      summary: Register a new employee
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeSignupRequest'
            example:
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
              password: "Test1234!"
              phoneNumber: "+37367123456"
              dateOfBirth: "1990-01-01"
              role: [ "ELECTRICIAN" ]
              address:
                street: "Str. Paris"
                city: "Chisinau"
                postalCode: "2001"
                country: "Moldova"
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
              example:
                firstName: "John"
                lastName: "Doe"
                email: "john.doe@example.com"
                password: "Test1234!"
                phoneNumber: "+37367123456"
                dateOfBirth: "1990-01-01"
                role: [ "ELECTRICIAN" ]
                address:
                  street: "Str. Paris"
                  city: "Chisinau"
                  postalCode: "2001"
                  country: "Moldova"
        '400':
          description: Bad request, invalid input

  /auth/signup/customer:
    post:
      tags:
        - Authentication
      summary: Register a new customer
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSignupRequest'
            example:
              firstName: "Jane"
              lastName: "Smith"
              email: "jane.smith@example.com"
              password: "Customer1234!"
              phoneNumber: "+37367987654"
              dateOfBirth: "1992-05-15"
              address:
                street: "Str. Bucuresti"
                city: "Chisinau"
                postalCode: "2012"
                country: "Moldova"
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request, invalid input

  /profile/{id}:
    get:
      tags:
        - Profile
      summary: Get profile by user ID
      operationId: getProfileById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
        '404':
          description: User not found

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: "johndoe@example.com"
        password: "StrongPassword123!"

    Address:
      type: object
      required:
        - street
        - city
        - postalCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
      example:
        street: "Str. Paris"
        city: "Chisinau"
        postalCode: "2001"
        country: "Moldova"

    CustomerSignupRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - phoneNumber
        - dateOfBirth
        - address
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        phoneNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        address:
          $ref: '#/components/schemas/Address'

    EmployeeSignupRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - phoneNumber
        - dateOfBirth
        - role
        - address
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        phoneNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        role:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/UserRole'
        address:
          $ref: '#/components/schemas/Address'

    UserRole:
      type: string
      enum:
        - ADMIN
        - MECHANIC
        - CAR_DETAILER
        - CAR_PAINTER
        - ELECTRICIAN
        - GUEST
        - REGULAR
        - LOYAL

    Profile:
      oneOf:
        - $ref: '#/components/schemas/Customer'
        - $ref: '#/components/schemas/Employee'
      discriminator:
        propertyName: profileType
        mapping:
          CUSTOMER: '#/components/schemas/Customer'
          EMPLOYEE: '#/components/schemas/Employee'

    Customer:
      type: object
      required:
        - id
        - profileType
        - firstName
        - lastName
        - email
        - password
        - phoneNumber
        - dateOfBirth
        - address
        - role
        - vehicles
        - serviceVisits
        - visitCounter
      properties:
        id:
          type: string
          format: uuid
        profileType:
          type: string
          enum: [ CUSTOMER ]
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        address:
          $ref: '#/components/schemas/Address'
        role:
          type: array
          items:
            type: string
        vehicles:
          type: array
          items:
            type: object
        serviceVisits:
          type: array
          items:
            type: object
        visitCounter:
          type: integer

    Employee:
      type: object
      required:
        - id
        - profileType
        - firstName
        - lastName
        - email
        - password
        - phoneNumber
        - dateOfBirth
        - address
        - role
      properties:
        id:
          type: string
          format: uuid
        profileType:
          type: string
          enum: [ EMPLOYEE ]
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        address:
          $ref: '#/components/schemas/Address'
        role:
          type: array
          items:
            type: string
